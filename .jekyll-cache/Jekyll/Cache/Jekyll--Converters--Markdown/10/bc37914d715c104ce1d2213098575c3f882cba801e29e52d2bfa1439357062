I"ž<p>Traditional arithmetic operations is operated over tensor with exactly compatible shape. While broadcast allows tensor (scalar, vector, matrix or high dimensional arrays) with different shape to operate arithmetic operations (add or multiply) by <strong>replicating the smaller tensor along the lacking dimension</strong>. Therefore, it allows a scalar (one number) may be added to a matrix (2d array), a vector (1d array) to a matrix  or a scalar to a vector.</p>

<h3 id="1-broadcast-in-numpy">1. Broadcast in Numpy</h3>

<p>In this case, the two arrays must have exactly the same shape:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">2.0</span><span class="p">,</span><span class="mf">3.0</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">2.0</span><span class="p">,</span><span class="mf">2.0</span><span class="p">,</span><span class="mf">2.0</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span>
    <span class="n">array</span><span class="p">([</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">])</span>
</code></pre></div></div>

<p>numpy broadcast mechanism relaxes this constraint when the arraysâ€™ shape meet certain constraints: 1) they are equal, or
2) one of them is 1.</p>

<p>The smaller array is <code class="language-plaintext highlighter-rouge">broadcast</code> across the larger array so that they have compatible shapes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">2.0</span><span class="p">,</span><span class="mf">3.0</span><span class="p">])</span>
<span class="n">b</span><span class="o">=</span><span class="mi">2</span>
<span class="k">print</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">array</span><span class="p">([</span><span class="mf">2.</span><span class="p">,</span> <span class="mf">4.</span><span class="p">,</span> <span class="mf">6.</span><span class="p">])</span>
</code></pre></div></div>

<p>More detailed rules:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Image  (3d array): 256 x 256 x 3
Scale  (1d array):             3
Result (3d array): 256 x 256 x 3
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A      (4d array):  8 x 1 x 6 x 1
B      (3d array):      7 x 1 x 5
Result (4d array):  8 x 7 x 6 x 5
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A      (2d array):  5 x 4
B      (1d array):      1
Result (2d array):  5 x 4

A      (2d array):  5 x 4
B      (1d array):      4
Result (2d array):  5 x 4

A      (3d array):  15 x 3 x 5
B      (3d array):  15 x 1 x 5
Result (3d array):  15 x 3 x 5

A      (3d array):  15 x 3 x 5
B      (2d array):       3 x 5
Result (3d array):  15 x 3 x 5

A      (3d array):  15 x 3 x 5
B      (2d array):       3 x 1
Result (3d array):  15 x 3 x 5
</code></pre></div></div>

<h3 id="2-broadcast-in-theano">2. Broadcast in Theano</h3>

<p>The image examples in theano are shown below.</p>

<p><img src="http://deeplearning.net/software/theano/_images/bcast.png" alt="Theano bcast" /></p>

<p>where <code class="language-plaintext highlighter-rouge">T</code> and <code class="language-plaintext highlighter-rouge">F</code> stands for <code class="language-plaintext highlighter-rouge">True</code> and <code class="language-plaintext highlighter-rouge">False</code> respectively, denoting which dimension can be broadcasted.</p>

<h3 id="3-differences">3. Differences</h3>

<ol>
  <li>numpy broadcast dynamically;</li>
  <li>theano needs to knows, for any operations which supports broadcasting, which dimensions will need to be broadcasted.</li>
</ol>

<h3 id="references">References</h3>
<ul>
  <li><a href="http://deeplearning.net/software/theano/tutorial/broadcasting.html">Theano broadcast Doc</a></li>
  <li><a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html">Numpy broadcast Doc</a></li>
</ul>
:ET