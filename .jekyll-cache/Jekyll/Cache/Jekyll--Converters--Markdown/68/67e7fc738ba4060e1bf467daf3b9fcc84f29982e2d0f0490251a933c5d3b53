I"Â<p><code class="language-plaintext highlighter-rouge">GEMM</code> stands for general matrix-matrix operation.</p>
<h2 id="the-first-version">The first version</h2>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create macros so that the matrices are stored in column-major order.</span>
<span class="cp">#define A(i,j) a[ (j) * lda + (i) ]
</span>
<span class="cp">#define B(i,j) b[ (j) * ldb + (i) ]
</span>
<span class="cp">#define C(i,j) c[ (j) * ldc + (i) ]
</span>
<span class="c1">// C= A * B + C</span>
<span class="kt">void</span> <span class="nf">gemm</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">lda</span><span class="p">,</span>
                               <span class="kt">double</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ldb</span><span class="p">,</span>
                               <span class="kt">double</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ldc</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="o">++</span><span class="n">i</span><span class="p">){</span>             <span class="c1">// Loop over the rows of C</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="o">++</span><span class="n">j</span><span class="p">){</span>           <span class="c1">// Loop over the columns of C</span>
      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">p</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span><span class="o">++</span><span class="n">p</span><span class="p">){</span>         <span class="c1">// update C(i,j) with the inner</span>
        <span class="n">C</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">+=</span> <span class="n">A</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">p</span><span class="p">)</span> <span class="o">*</span> <span class="n">B</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>  <span class="c1">// product of the i-th row of A</span>
      <span class="p">}</span>                             <span class="c1">// and the j-th column of B.</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET