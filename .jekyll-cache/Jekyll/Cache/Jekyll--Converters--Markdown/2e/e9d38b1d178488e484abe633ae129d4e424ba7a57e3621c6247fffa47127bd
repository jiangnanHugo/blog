I"7R<p>This part is used for those who want to build faster functions in <code class="language-plaintext highlighter-rouge">c/c++</code>, and import the <code class="language-plaintext highlighter-rouge">xxx.so</code> or <code class="language-plaintext highlighter-rouge">xxx.dll</code> in python, so that the overall codes can run faster with the embedded <code class="language-plaintext highlighter-rouge">c/c++</code> languages supports.</p>

<h3 id="1-c-foreign-function-interface-cffi">1. C Foreign Function Interface (CFFI)</h3>

<p><code class="language-plaintext highlighter-rouge">CFFI &lt;https://cffi.readthedocs.io/en/latest/&gt;</code> provide a simple to use mechanism for interfacing with C from CPython and PyPy. It supports two model:</p>

<ol>
  <li>a inline ABI compatibility model, you can dynamically load and run functions from executable modules</li>
  <li>an API model, can build C extension modules.</li>
</ol>

<p>ABI Interaction</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">cffi</span> <span class="kn">import</span> <span class="n">FFI</span>
<span class="n">ffi</span><span class="o">=</span><span class="n">FFI</span><span class="p">()</span>
<span class="n">ffi</span><span class="p">.</span><span class="n">cdef</span><span class="p">(</span><span class="s">"size_t strlen(const char*);"</span><span class="p">)</span>
<span class="n">clib</span><span class="o">=</span><span class="n">ffi</span><span class="p">.</span><span class="n">dlopen</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
<span class="n">length</span><span class="o">=</span><span class="n">clib</span><span class="p">.</span><span class="n">strlne</span><span class="p">(</span><span class="n">String</span> <span class="n">to</span> <span class="n">be</span> <span class="n">evaluated</span><span class="p">.)</span>
<span class="c1">#print:23
</span><span class="k">print</span><span class="p">(</span><span class="s">"{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">length</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="2-ctypes">2. Ctypes</h3>

<p>the ctypes modules provides C compatible data types and functions to load DLLs so that calls can be made to C shared libraries without having to modify them.</p>

<p>Simple C code to add two numbers, save it as <code class="language-plaintext highlighter-rouge">add.c</code></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// sample C file to add 2 numbers -int and floats</span>
<span class="cp">#include&lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">add_int</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">add_float</span><span class="p">(</span><span class="kt">float</span><span class="p">,</span><span class="kt">float</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">add_int</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">q</span><span class="p">){</span> <span class="k">return</span> <span class="n">p</span><span class="o">+</span><span class="n">q</span><span class="p">;}</span>
<span class="kt">float</span> <span class="nf">add_float</span><span class="p">(</span><span class="kt">float</span> <span class="n">p</span><span class="p">,</span><span class="kt">float</span> <span class="n">q</span><span class="p">){</span> <span class="k">return</span> <span class="n">p</span><span class="o">+</span><span class="n">q</span><span class="p">;}</span>
</code></pre></div></div>

<p>Next we compile the C file to a <code class="language-plaintext highlighter-rouge">.so</code> file (or <code class="language-plaintext highlighter-rouge">DLL</code>) :</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">-shared</span> <span class="nt">-Wl</span>,-soname,adder <span class="nt">-o</span> adder.so <span class="nt">-fPIC</span> add.c
</code></pre></div></div>

<p>Now in your python code:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">ctypes</span> <span class="kn">import</span> <span class="o">*</span>
<span class="c1"># load the shared object file
</span><span class="n">adder</span><span class="o">=</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'./adder.so'</span><span class="p">)</span>
<span class="c1"># Find sum of integers
</span><span class="n">res_int</span><span class="o">=</span><span class="n">adder</span><span class="p">.</span><span class="n">add_int</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span> <span class="s">"Sum of 4 and 5 ="</span> <span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">res_int</span><span class="p">)</span>
<span class="c1"># &gt;&gt;&gt; Sum of 4 and 5 = 9
# find sum of floats
</span><span class="n">a</span><span class="o">=</span><span class="n">c_float</span><span class="p">(</span><span class="mf">5.5</span><span class="p">)</span>
<span class="n">b</span><span class="o">=</span><span class="n">c_float</span><span class="p">(</span><span class="mf">4.1</span><span class="p">)</span>

<span class="n">add_float</span><span class="o">=</span><span class="n">adder</span><span class="p">.</span><span class="n">add_float</span>
<span class="n">add_float</span><span class="p">.</span><span class="n">restype</span><span class="o">=</span><span class="n">c_float</span>
<span class="k">print</span> <span class="s">"Sum of 5.5 and 4.1 = "</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">add_float</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>
<span class="c1"># &gt;&gt;&gt; Sum of 5.5 and 4.1 =  9.60000038147
</span></code></pre></div></div>

<h3 id="3-simplified-wrapper-and-interface-generator-swig">3. Simplified Wrapper and Interface Generator (SWIG)</h3>
<p>In this method, the developer must develop an extra interface file which is an input to SWIG.  This is a great method when you have a C/C++ code base, and you want to interface it to many different languages.</p>

<p>The C code <code class="language-plaintext highlighter-rouge">example.c</code> that has avariety of functions and variables:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;time.h&gt;
</span>
<span class="kt">double</span> <span class="n">my_variable</span><span class="o">=</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">fact</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">else</span>  <span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">my_mod</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span> <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="o">%</span><span class="n">y</span><span class="p">);}</span>
<span class="kt">char</span><span class="o">*</span> <span class="nf">get_time</span><span class="p">(){</span>
  <span class="kt">time_t</span> <span class="n">ltime</span><span class="p">;</span>
  <span class="n">time</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ltime</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">ctime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ltime</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The interface file <code class="language-plaintext highlighter-rouge">example.i</code> - this will remain the same irrespective of the language you want to port yout C code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/* example.i */
 %module example
 %{
 /* Put header files here or function declarations like below */
 extern double My_variable;
 extern int fact(int n);
 extern int my_mod(int x, int y);
 extern char *get_time();
 %}

 extern double My_variable;
 extern int fact(int n);
 extern int my_mod(int x, int y);
 extern char *get_time();
</code></pre></div></div>

<p>And compile it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unix % swig -python example.i
unix % gcc -c example.c example_wrap.c \
        -I/usr/local/include/python2.1
unix % ld -shared example.o example_wrap.o -o _example.so
</code></pre></div></div>

<p>Finally, the Python output:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">example</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">example</span><span class="p">.</span><span class="n">fact</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="mi">120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">example</span><span class="p">.</span><span class="n">my_mod</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">example</span><span class="p">.</span><span class="n">get_time</span><span class="p">()</span>
<span class="s">'Sun Feb 11 23:01:07 1996'</span>
</code></pre></div></div>
<p>It’s too complex.</p>

<h3 id="4-cpython-api">4. C/Python API</h3>
<p>Its the most widely used method - it’s simplicity and you can manipulate python objects in your C code.</p>

<p>All python object are represented as <code class="language-plaintext highlighter-rouge">PyObject</code> struct which is defined in <code class="language-plaintext highlighter-rouge">Python.h</code> header file. For example, if the <code class="language-plaintext highlighter-rouge">PyObject</code> is also a <code class="language-plaintext highlighter-rouge">PyListType</code> (basically a list), the we can use the <code class="language-plaintext highlighter-rouge">PyList_Size()</code> for the length of the list ( equal to <code class="language-plaintext highlighter-rouge">len(list)</code>). Most of the basic functions/operations are defined in <code class="language-plaintext highlighter-rouge">Python.h</code></p>

<p><code class="language-plaintext highlighter-rouge">adder.c</code>:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Python.h has all the required function definitions to manipulate the Python objects.</span>
<span class="cp">#include&lt;Python.h&gt;
</span>
<span class="c1">// This is the function that is called from your python code</span>
<span class="k">static</span> <span class="n">PyObject</span><span class="o">*</span> <span class="nf">addList_add</span><span class="p">(</span><span class="n">PyObject</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span><span class="n">PyObject</span><span class="o">*</span><span class="n">args</span><span class="p">){</span>
  <span class="n">PyObject</span><span class="o">*</span> <span class="n">ListObj</span><span class="p">;</span>

  <span class="c1">//The input arguments come as a tuple, we parse the args to get the various variables</span>
  <span class="c1">//In this case it's only one list variable, which will now be reference by ListObj</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span> <span class="n">PyArg_ParseTuple</span><span class="p">(</span><span class="n">atgs</span><span class="p">,</span><span class="s">"O"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ListObj</span><span class="p">)){</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// length of the list</span>
  <span class="kt">long</span> <span class="n">length</span><span class="o">=</span><span class="n">PyList_Size</span><span class="p">(</span><span class="n">listObj</span><span class="p">);</span>

  <span class="c1">//iterate over all the elements</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="c1">// get an element out of the list - the element is also a python objects</span>
    <span class="n">PyObject</span><span class="o">*</span> <span class="n">temp</span><span class="o">=</span><span class="n">PyList_GetItem</span><span class="p">(</span><span class="n">listObj</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
    <span class="c1">// we know that object reprsents an integer - so convert it into C long</span>
    <span class="kt">long</span> <span class="n">elem</span><span class="o">=</span><span class="n">PyInt_AsLong</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
    <span class="n">sum</span><span class="o">+=</span><span class="n">elem</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// value returned back to python code - another python object</span>
  <span class="c1">// build value here convers the C long a python integer</span>
  <span class="k">return</span> <span class="n">Py_BuildValue</span><span class="p">(</span><span class="s">"i"</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/* This table contains the relavent info mapping -
 &lt;function-name in python module&gt;, &lt;actual - function&gt;,
 &lt;type-of-args the function expects&gt;, &lt;docstring associcated with the function&gt;
*/</span>
<span class="k">static</span> <span class="n">PyMethodDef</span> <span class="n">addList_funcs</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span>
  <span class="p">{</span><span class="s">"add"</span><span class="p">,(</span><span class="n">PyCFunction</span><span class="p">)</span><span class="n">addList_add</span><span class="p">,</span><span class="n">METH_VARAGES</span><span class="p">,</span><span class="n">addList_docs</span><span class="p">},</span>
  <span class="p">{</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nb">NULL</span><span class="p">}</span>
<span class="p">};</span>

<span class="cm">/*
addList is the module name, add this is the initialization blockof the module.
&lt;desired module name&gt;,&lt;the-info-table&gt;,&lt;module's-docstring&gt;
*/</span>
<span class="n">PyMODINIT_FUNC</span> <span class="nf">initaddList</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
  <span class="n">Py_InitModule3</span><span class="p">(</span><span class="s">"addList"</span><span class="p">,</span> <span class="n">addList_funcs</span><span class="p">,</span>
                  <span class="s">"Add all the lists"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>the <code class="language-plaintext highlighter-rouge">&lt;Python.h&gt;</code> file consists of all the required types (to represent Python Object types) and function definitions (to operate on the python objects).</li>
  <li>Next we write the function which we plan to call from python. {module-name}_{function-name}, which in this case is <code class="language-plaintext highlighter-rouge">addList_add</code>.</li>
  <li>Then fill in the information table - contains all the relevant information of the functions.</li>
  <li>the module initialization block which is of the signature <code class="language-plaintext highlighter-rouge">PyMODINIT_FUNC init{module-name}</code></li>
</ol>

<p>Now we build the C module. Save the following code as <code class="language-plaintext highlighter-rouge">setup.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># build the modules
</span><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">Extensions</span>
<span class="n">setup</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"addList"</span><span class="p">,</span><span class="n">version</span><span class="o">=</span><span class="s">'1.0'</span><span class="p">,</span> <span class="n">ext_modules</span><span class="o">=</span><span class="p">[</span><span class="n">Extension</span><span class="p">(</span><span class="s">'addList'</span><span class="p">,[</span><span class="s">'adder.c'</span><span class="p">])])</span>
</code></pre></div></div>

<p>and run</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="n">install</span>
</code></pre></div></div>

<p>This should now build and install the C file into the python module we desire. After all this hard work, we’ll now test if the module works.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># module that talks to the C  code
</span><span class="kn">import</span> <span class="nn">addList</span>
<span class="n">l</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">print</span> <span class="s">"Sum of List - "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">+</span><span class="s">" = "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">addList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</code></pre></div></div>
<p>Add here is the output</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Sum</span> <span class="n">of</span> <span class="n">List</span> <span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">15</span>
</code></pre></div></div>
<p>So as you can see, we have developed our first successful C Python extension using the <code class="language-plaintext highlighter-rouge">&lt;Python.h&gt;</code> API.</p>

<h3 id="references">References:</h3>
<ul>
  <li><a href="http://book.pythontips.com/en/latest/python_c_extension.html">Intermediate Python</a>;</li>
  <li><a href="http://docs.python-guide.org/en/latest/scenarios/clibs/">Hitchhiker’s Guide to Python</a>.</li>
</ul>
:ET