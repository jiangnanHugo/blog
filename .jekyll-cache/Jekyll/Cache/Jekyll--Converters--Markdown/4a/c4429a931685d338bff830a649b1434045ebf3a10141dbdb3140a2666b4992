I"Ï#<h3 id="momentum">Momentum</h3>
<ol>
  <li>\(m_k\) is noted as momentum, also call velocity.</li>
  <li>\(w\) is the parameters,</li>
  <li>\(\nabla f(w_k)\) is gradient.</li>
</ol>

<p>The Momentum-based gradient descent is:</p>

<p>\begin{aligned}
m_k &amp;= \beta m_{k-1} +\nabla f(w_k)  \\<br />
w_k &amp;=w_{k-1} - \alpha m_k
\end{aligned}</p>

<ol>
  <li>\(\beta=0\), we recover the gradient descent.</li>
  <li>\(\beta=0.99\), this appears to be the boost we need.</li>
</ol>

<h3 id="adam">Adam</h3>

<p>\begin{aligned}
m_k &amp;= \beta_1 m_{k-1} + (1-\beta_1)\nabla f(w_k)  \\<br />
v_k &amp;= \beta_2 v_{k-1} + (1-\beta_2)(\nabla f(w_k))^2  \\<br />
\hat m_k &amp;= \frac{m_k}{1-\beta_1^t} \\<br />
\hat v_k &amp;= \frac{v_k}{1-\beta_2^t} \\<br />
w_k &amp;=w_{k-1} - \alpha \frac{\hat m_k}{\sqrt{\hat v_k} +\varepsilon}
\end{aligned}</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__global__</span>
<span class="kt">void</span> <span class="nf">adam_update_kernel</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">w</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span>
        <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">float</span> <span class="n">beta1</span><span class="p">,</span> <span class="kt">float</span> <span class="n">beta2</span><span class="p">,</span>
        <span class="kt">float</span> <span class="n">correction</span><span class="p">,</span> <span class="kt">float</span> <span class="n">eps</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="n">lr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">CUDA_KERNEL_LOOP</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">float</span> <span class="n">gi</span> <span class="o">=</span> <span class="n">g</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="kt">float</span> <span class="n">mi</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">beta1</span> <span class="o">+</span> <span class="n">gi</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">beta1</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">vi</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">beta2</span> <span class="o">+</span> <span class="n">gi</span> <span class="o">*</span> <span class="n">gi</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">beta2</span><span class="p">);</span>
        <span class="kt">float</span> <span class="n">ng</span> <span class="o">=</span> <span class="n">lr</span> <span class="o">*</span> <span class="n">correction</span> <span class="o">*</span> <span class="n">mi</span> <span class="o">/</span> <span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">vi</span><span class="p">)</span> <span class="o">+</span> <span class="n">eps</span><span class="p">);</span>
        <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">ng</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">adam_update</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">w</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">float</span> <span class="n">beta1</span><span class="p">,</span>
        <span class="kt">float</span> <span class="n">beta2</span><span class="p">,</span> <span class="kt">float</span> <span class="n">correction</span><span class="p">,</span> <span class="kt">float</span> <span class="n">eps</span><span class="p">,</span> <span class="k">const</span> <span class="kt">float</span> <span class="n">lr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="n">dim3</span> <span class="n">blockSize</span><span class="p">(</span><span class="n">CUDA_NUM_THREADS</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">const</span> <span class="n">dim3</span> <span class="n">gridSize</span><span class="p">(</span><span class="n">GET_BLOCKS</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">adam_update_kernel</span><span class="o">&lt;&lt;&lt;</span><span class="n">gridSize</span><span class="p">,</span> <span class="n">blockSize</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">beta1</span><span class="p">,</span> <span class="n">beta2</span><span class="p">,</span>
            <span class="n">correction</span><span class="p">,</span> <span class="n">eps</span><span class="p">,</span> <span class="n">lr</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">Optimzer</span><span class="o">::</span><span class="n">Adam</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">w</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">g</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">m</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">float</span> <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-8</span><span class="p">,</span> <span class="n">beta1</span> <span class="o">=</span> <span class="mf">0.9</span><span class="p">,</span> <span class="n">beta2</span> <span class="o">=</span> <span class="mf">0.999</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">float</span> <span class="n">correction</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mf">1.</span> <span class="o">-</span> <span class="n">pow</span><span class="p">(</span><span class="n">beta2</span><span class="p">,</span> <span class="n">_t</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.</span> <span class="o">-</span> <span class="n">pow</span><span class="p">(</span><span class="n">beta1</span><span class="p">,</span> <span class="n">_t</span><span class="p">));</span>
    <span class="n">adam_update</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">beta1</span><span class="p">,</span> <span class="n">beta2</span><span class="p">,</span> <span class="n">correction</span><span class="p">,</span> <span class="n">eps</span><span class="p">,</span> <span class="n">_lr</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="references">References</h3>
<ol>
  <li><a href="https://distill.pub/2017/momentum/">Why Momentum Really Works</a></li>
</ol>
:ET